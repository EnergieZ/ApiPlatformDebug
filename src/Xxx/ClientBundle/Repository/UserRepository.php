<?php

namespace Xxx\ClientBundle\Repository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Xxx\ClientBundle\Entity\User;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($username)
    {
        $user = $this->findOneByEmail($username);

        if (!$user) {
            throw new UsernameNotFoundException('No user found for username '.$username);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf(
                'Instances of "%s" are not supported.',
                $class
            ));
        }

        if (!$refreshedUser = $this->find($user->getId())) {
            throw new UsernameNotFoundException(sprintf('User with id %s not found', json_encode($user->getId())));
        }

        return $refreshedUser;
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }

    public function getNearFreeAgent($longitude,$latitude){
        $sql = <<<EOD
   SELECT
        u.*,
        ( 6371 * ACOS( COS( RADIANS({$longitude}) ) * COS( RADIANS( agency.latitude ) ) * COS( RADIANS( agency.longitude ) - RADIANS({$latitude}) ) + SIN( RADIANS({$longitude}) ) * SIN( RADIANS( agency.latitude ) ) ) ) AS distance,
        COUNT(DISTINCT(ticket.id)) AS charge
    FROM
        user as u
    INNER JOIN
        user_agency ua ON u.id = ua.user_id
    INNER JOIN
        agency ON ua.agency_id = agency.id
    LEFT JOIN
        project ON project.eateam_user_id = u.id
    LEFT JOIN
        ticket ON (ticket.project_id = project.id AND ticket.ticket_state_id != 1) -- 1 = cloturÃ©. TODO : change id
    GROUP BY
        u.id
    ORDER BY
        distance ASC,
        charge ASC
    LIMIT 0,1
EOD;

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata(User::class, "u");
        $stmt = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $stmt->execute();
        return $stmt->getSingleResult();
    }
}
